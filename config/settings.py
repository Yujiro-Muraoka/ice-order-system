"""
cafeMuji - カフェ注文管理システム
Django設定ファイル

このファイルは、cafeMujiプロジェクトの全体的な設定を管理します。
主な設定項目：
- データベース設定
- アプリケーション設定
- セキュリティ設定
- 静的ファイル設定
- 国際化設定
- セッション設定

Generated by 'django-admin startproject' using Django 5.2.1.
"""

from pathlib import Path
import os
import dj_database_url

# プロジェクトのルートディレクトリを設定
# このディレクトリを基準に他のパスを設定します
BASE_DIR = Path(__file__).resolve().parent.parent


# ==================== セキュリティ設定 ====================
# 本番環境では必ず変更してください！

# SECRET_KEY（本番環境対応）
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-6ox6xy4q1mlro#_kngpxe3!5y8z6j-j6%*!^a%u_ozd%3$^&$g')

# デバッグモード（本番環境対応）
DEBUG = os.environ.get('DEBUG', 'False').lower() == 'true'

# アクセスを許可するホスト名のリスト（本番環境対応）
ALLOWED_HOSTS = []
if os.environ.get('RENDER_EXTERNAL_HOSTNAME'):
    ALLOWED_HOSTS.append(os.environ.get('RENDER_EXTERNAL_HOSTNAME'))
if DEBUG:
    ALLOWED_HOSTS.extend(['192.168.68.59', '.onrender.com', 'localhost', '127.0.0.1'])


# ==================== アプリケーション設定 ====================

# インストールされているDjangoアプリケーションのリスト
INSTALLED_APPS = [
    # Django標準アプリケーション
    'django.contrib.admin',      # 管理画面
    'django.contrib.auth',       # 認証システム
    'django.contrib.contenttypes', # コンテンツタイプフレームワーク
    'django.contrib.sessions',   # セッションフレームワーク
    'django.contrib.messages',   # メッセージフレームワーク
    'django.contrib.staticfiles', # 静的ファイル管理
    
    # サードパーティアプリケーション
    'rest_framework',       # Django REST Framework
    'corsheaders',          # CORS対応
    'django_extensions',    # Django拡張機能
    
    # cafeMuji独自アプリケーション
    'food',        # フード注文管理
    'ice',         # アイスクリーム注文管理
    'shavedice',   # かき氷注文管理
    'api',         # REST API
]

# ミドルウェア設定（リクエスト処理の順序）
MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',             # CORS対応（最上位）
    'django.middleware.security.SecurityMiddleware',      # セキュリティ
    'django.contrib.sessions.middleware.SessionMiddleware', # セッション
    'django.middleware.common.CommonMiddleware',          # 共通処理
    'django.middleware.csrf.CsrfViewMiddleware',          # CSRF保護
    'django.contrib.auth.middleware.AuthenticationMiddleware', # 認証
    'django.contrib.messages.middleware.MessageMiddleware',    # メッセージ
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # クリックジャッキング対策
]

# メインURL設定ファイルの指定
ROOT_URLCONF = 'config.urls'

# テンプレート設定
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates', # テンプレートエンジン
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 共通テンプレートディレクトリ
        'APP_DIRS': True,  # アプリケーション内のtemplatesディレクトリを自動検索
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',    # リクエスト情報
                'django.contrib.auth.context_processors.auth',   # 認証情報
                'django.contrib.messages.context_processors.messages', # メッセージ
            ],
        },
    },
]

# WSGIアプリケーション設定（本番環境でのWebサーバー連携用）
WSGI_APPLICATION = 'config.wsgi.application'


# ==================== データベース設定 ====================

# データベース接続設定（本番環境対応）
if os.environ.get('DATABASE_URL'):
    # 本番環境（PostgreSQL）
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get('DATABASE_URL'))
    }
else:
    # 開発環境（SQLite）
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',  # SQLiteデータベースエンジン
            'NAME': BASE_DIR / 'db.sqlite3',          # データベースファイルの場所
        }
    }


# ==================== パスワード検証設定 ====================

# パスワード強度の検証ルール
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # ユーザー情報との類似性チェック
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', # 最小文字数チェック
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', # 一般的なパスワードチェック
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', # 数字のみのパスワードチェック
    },
]


# ==================== 国際化設定 ====================

# 言語設定
LANGUAGE_CODE = 'en-us'  # デフォルト言語（英語）

# タイムゾーン設定
TIME_ZONE = 'Asia/Tokyo'  # 日本時間

# 国際化機能の有効化
USE_I18N = True   # 多言語対応

# タイムゾーン機能の有効化
USE_TZ = True     # タイムゾーン対応


# ==================== 静的ファイル設定 ====================

# 静的ファイルのURLパス
STATIC_URL = 'static/'

# 静的ファイルの検索ディレクトリ
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # 全体共通の静的ファイルディレクトリ
]

# 本番環境での静的ファイル収集先
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# デフォルトの主キーフィールドタイプ
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ==================== キャッシュ設定 ====================

# ローカルメモリキャッシュ設定（開発環境用）
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',  # ローカルメモリキャッシュ
        'LOCATION': 'unique-snowflake',  # キャッシュの識別名
        'OPTIONS': {
            'TIMEOUT': 300,       # キャッシュの有効期限（秒）
            'MAX_ENTRIES': 1000,  # 最大エントリ数
            'CULL_FREQUENCY': 3,  # キャッシュ満杯時の削除頻度
        }
    }
}

# ==================== ログ設定 ====================

# 本番環境対応のログ設定
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'cafeMuji': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# ==================== Django REST Framework設定 ====================

REST_FRAMEWORK = {
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',  # 開発時のみ
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_FILTER_BACKENDS': [
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '100/hour',
        'user': '1000/hour'
    }
}

# ==================== CORS設定 ====================

# 開発環境でのCORS許可設定
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOWED_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]