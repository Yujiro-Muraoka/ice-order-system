"""
cafeMuji - カフェ注文管理システム
Django設定ファイル

このファイルは、cafeMujiプロジェクトの全体的な設定を管理します。
主な設定項目：
- データベース設定
- アプリケーション設定
- セキュリティ設定
- 静的ファイル設定
- 国際化設定
- セッション設定

Generated by 'django-admin startproject' using Django 5.2.1.
"""

from pathlib import Path
import os

# プロジェクトのルートディレクトリを設定
# このディレクトリを基準に他のパスを設定します
BASE_DIR = Path(__file__).resolve().parent.parent


# ==================== セキュリティ設定 ====================
# 本番環境では必ず変更してください！

# Djangoの秘密鍵（セッション暗号化などに使用）
# 本番環境では環境変数から取得することを推奨
SECRET_KEY = 'django-insecure-6ox6xy4q1mlro#_kngpxe3!5y8z6j-j6%*!^a%u_ozd%3$^&$g'

# デバッグモード（開発時はTrue、本番環境では必ずFalse）
# Trueの場合、詳細なエラー情報が表示されます
DEBUG = True

# アクセスを許可するホスト名のリスト
# 本番環境では実際のドメイン名を指定
ALLOWED_HOSTS = [
    '192.168.68.59',    # ローカルネットワークIP
    '.onrender.com',    # Render.comのホスティング
    'localhost',        # ローカル開発用
    '127.0.0.1',        # ローカル開発用
]


# ==================== アプリケーション設定 ====================

# インストールされているDjangoアプリケーションのリスト
INSTALLED_APPS = [
    # Django標準アプリケーション
    'django.contrib.admin',      # 管理画面
    'django.contrib.auth',       # 認証システム
    'django.contrib.contenttypes', # コンテンツタイプ
    'django.contrib.sessions',   # セッション管理
    'django.contrib.messages',   # メッセージフレームワーク
    'django.contrib.staticfiles', # 静的ファイル管理
    
    # cafeMuji独自アプリケーション
    'food',        # フード注文管理
    'ice',         # アイスクリーム注文管理
    'shavedice',   # かき氷注文管理
]

# ミドルウェア設定（リクエスト処理の順序）
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',      # セキュリティ
    'django.contrib.sessions.middleware.SessionMiddleware', # セッション
    'django.middleware.common.CommonMiddleware',          # 共通処理
    'django.middleware.csrf.CsrfViewMiddleware',          # CSRF保護
    'django.contrib.auth.middleware.AuthenticationMiddleware', # 認証
    'django.contrib.messages.middleware.MessageMiddleware',    # メッセージ
    'django.middleware.clickjacking.XFrameOptionsMiddleware',  # クリックジャッキング対策
]

# メインURL設定ファイルの指定
ROOT_URLCONF = 'config.urls'

# テンプレート設定
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates', # テンプレートエンジン
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # 共通テンプレートディレクトリ
        'APP_DIRS': True,  # アプリケーション内のtemplatesディレクトリを自動検索
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',    # リクエスト情報
                'django.contrib.auth.context_processors.auth',   # 認証情報
                'django.contrib.messages.context_processors.messages', # メッセージ
            ],
        },
    },
]

# WSGIアプリケーション設定（本番環境でのWebサーバー連携用）
WSGI_APPLICATION = 'config.wsgi.application'


# ==================== データベース設定 ====================

# データベース接続設定
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',  # SQLiteデータベースエンジン
        'NAME': BASE_DIR / 'db.sqlite3',         # データベースファイルの場所
    }
}


# ==================== パスワード検証設定 ====================

# パスワードの強度チェック設定
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', # ユーザー情報との類似性チェック
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', # 最小文字数チェック
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', # 一般的なパスワードチェック
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', # 数字のみのパスワードチェック
    },
]


# ==================== 国際化設定 ====================

# 言語設定
LANGUAGE_CODE = 'en-us'  # デフォルト言語（英語）

# タイムゾーン設定
TIME_ZONE = 'Asia/Tokyo'  # 日本時間

# 国際化機能の有効化
USE_I18N = True   # 多言語対応

# タイムゾーン機能の有効化
USE_TZ = True     # タイムゾーン対応


# ==================== 静的ファイル設定 ====================

# 静的ファイルのURLパス
STATIC_URL = 'static/'

# 静的ファイルの検索ディレクトリ
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # 全体共通の静的ファイルディレクトリ
]

# デフォルトの主キーフィールドタイプ
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ==================== セッション設定 ====================

# セッション有効時間（秒単位）
SESSION_COOKIE_AGE = 86400  # 24時間（1日）

# ブラウザ終了時にセッションを無効化するか
SESSION_EXPIRE_AT_BROWSER_CLOSE = False  # ブラウザ終了後もセッション保持
